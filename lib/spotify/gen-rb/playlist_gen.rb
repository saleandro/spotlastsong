#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.dirname(__FILE__) + '/playlistgen_types'

module PlaylistGen
  class Client
    include ::Thrift::Client

    def login(username, password)
      send_login(username, password)
      return recv_login()
    end

    def send_login(username, password)
      send_message('login', Login_args, :username => username, :password => password)
    end

    def recv_login()
      result = receive_message(Login_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'login failed: unknown result')
    end

    def logout(s)
      send_logout(s)
      recv_logout()
    end

    def send_logout(s)
      send_message('logout', Logout_args, :s => s)
    end

    def recv_logout()
      result = receive_message(Logout_result)
      raise result.e unless result.e.nil?
      return
    end

    def listPlaylists(s)
      send_listPlaylists(s)
      return recv_listPlaylists()
    end

    def send_listPlaylists(s)
      send_message('listPlaylists', ListPlaylists_args, :s => s)
    end

    def recv_listPlaylists()
      result = receive_message(ListPlaylists_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise result.se unless result.se.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'listPlaylists failed: unknown result')
    end

    def getPlaylist(s, name)
      send_getPlaylist(s, name)
      return recv_getPlaylist()
    end

    def send_getPlaylist(s, name)
      send_message('getPlaylist', GetPlaylist_args, :s => s, :name => name)
    end

    def recv_getPlaylist()
      result = receive_message(GetPlaylist_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise result.se unless result.se.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPlaylist failed: unknown result')
    end

    def createPlaylist(s, p)
      send_createPlaylist(s, p)
      recv_createPlaylist()
    end

    def send_createPlaylist(s, p)
      send_message('createPlaylist', CreatePlaylist_args, :s => s, :p => p)
    end

    def recv_createPlaylist()
      result = receive_message(CreatePlaylist_result)
      raise result.e unless result.e.nil?
      raise result.se unless result.se.nil?
      return
    end

    def addTracksToPlaylist(s, p, tracks)
      send_addTracksToPlaylist(s, p, tracks)
      recv_addTracksToPlaylist()
    end

    def send_addTracksToPlaylist(s, p, tracks)
      send_message('addTracksToPlaylist', AddTracksToPlaylist_args, :s => s, :p => p, :tracks => tracks)
    end

    def recv_addTracksToPlaylist()
      result = receive_message(AddTracksToPlaylist_result)
      raise result.e unless result.e.nil?
      raise result.se unless result.se.nil?
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_login(seqid, iprot, oprot)
      args = read_args(iprot, Login_args)
      result = Login_result.new()
      begin
        result.success = @handler.login(args.username, args.password)
      rescue SpotifyException => e
        result.e = e
      end
      write_result(result, oprot, 'login', seqid)
    end

    def process_logout(seqid, iprot, oprot)
      args = read_args(iprot, Logout_args)
      result = Logout_result.new()
      begin
        @handler.logout(args.s)
      rescue SpotifyException => e
        result.e = e
      end
      write_result(result, oprot, 'logout', seqid)
    end

    def process_listPlaylists(seqid, iprot, oprot)
      args = read_args(iprot, ListPlaylists_args)
      result = ListPlaylists_result.new()
      begin
        result.success = @handler.listPlaylists(args.s)
      rescue SpotifyException => e
        result.e = e
      rescue SessionExpiredException => se
        result.se = se
      end
      write_result(result, oprot, 'listPlaylists', seqid)
    end

    def process_getPlaylist(seqid, iprot, oprot)
      args = read_args(iprot, GetPlaylist_args)
      result = GetPlaylist_result.new()
      begin
        result.success = @handler.getPlaylist(args.s, args.name)
      rescue SpotifyException => e
        result.e = e
      rescue SessionExpiredException => se
        result.se = se
      end
      write_result(result, oprot, 'getPlaylist', seqid)
    end

    def process_createPlaylist(seqid, iprot, oprot)
      args = read_args(iprot, CreatePlaylist_args)
      result = CreatePlaylist_result.new()
      begin
        @handler.createPlaylist(args.s, args.p)
      rescue SpotifyException => e
        result.e = e
      rescue SessionExpiredException => se
        result.se = se
      end
      write_result(result, oprot, 'createPlaylist', seqid)
    end

    def process_addTracksToPlaylist(seqid, iprot, oprot)
      args = read_args(iprot, AddTracksToPlaylist_args)
      result = AddTracksToPlaylist_result.new()
      begin
        @handler.addTracksToPlaylist(args.s, args.p, args.tracks)
      rescue SpotifyException => e
        result.e = e
      rescue SessionExpiredException => se
        result.se = se
      end
      write_result(result, oprot, 'addTracksToPlaylist', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Login_args
    include ::Thrift::Struct
    USERNAME = 1
    PASSWORD = 2

    ::Thrift::Struct.field_accessor self, :username, :password
    FIELDS = {
      USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
      PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Login_result
    include ::Thrift::Struct
    SUCCESS = 0
    E = 1

    ::Thrift::Struct.field_accessor self, :success, :e
    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => TSession},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => SpotifyException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Logout_args
    include ::Thrift::Struct
    S = 1

    ::Thrift::Struct.field_accessor self, :s
    FIELDS = {
      S => {:type => ::Thrift::Types::STRUCT, :name => 's', :class => TSession}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Logout_result
    include ::Thrift::Struct
    E = 1

    ::Thrift::Struct.field_accessor self, :e
    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => SpotifyException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class ListPlaylists_args
    include ::Thrift::Struct
    S = 1

    ::Thrift::Struct.field_accessor self, :s
    FIELDS = {
      S => {:type => ::Thrift::Types::STRUCT, :name => 's', :class => TSession}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class ListPlaylists_result
    include ::Thrift::Struct
    SUCCESS = 0
    E = 1
    SE = 2

    ::Thrift::Struct.field_accessor self, :success, :e, :se
    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => TPlaylist}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => SpotifyException},
      SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => SessionExpiredException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class GetPlaylist_args
    include ::Thrift::Struct
    S = 1
    NAME = 2

    ::Thrift::Struct.field_accessor self, :s, :name
    FIELDS = {
      S => {:type => ::Thrift::Types::STRUCT, :name => 's', :class => TSession},
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class GetPlaylist_result
    include ::Thrift::Struct
    SUCCESS = 0
    E = 1
    SE = 2

    ::Thrift::Struct.field_accessor self, :success, :e, :se
    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => TPlaylist},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => SpotifyException},
      SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => SessionExpiredException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class CreatePlaylist_args
    include ::Thrift::Struct
    S = 1
    P = 2

    ::Thrift::Struct.field_accessor self, :s, :p
    FIELDS = {
      S => {:type => ::Thrift::Types::STRUCT, :name => 's', :class => TSession},
      P => {:type => ::Thrift::Types::STRUCT, :name => 'p', :class => TPlaylist}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class CreatePlaylist_result
    include ::Thrift::Struct
    E = 1
    SE = 2

    ::Thrift::Struct.field_accessor self, :e, :se
    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => SpotifyException},
      SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => SessionExpiredException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class AddTracksToPlaylist_args
    include ::Thrift::Struct
    S = 1
    P = 2
    TRACKS = 3

    ::Thrift::Struct.field_accessor self, :s, :p, :tracks
    FIELDS = {
      S => {:type => ::Thrift::Types::STRUCT, :name => 's', :class => TSession},
      P => {:type => ::Thrift::Types::STRUCT, :name => 'p', :class => TPlaylist},
      TRACKS => {:type => ::Thrift::Types::LIST, :name => 'tracks', :element => {:type => ::Thrift::Types::STRUCT, :class => TTrack}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class AddTracksToPlaylist_result
    include ::Thrift::Struct
    E = 1
    SE = 2

    ::Thrift::Struct.field_accessor self, :e, :se
    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => SpotifyException},
      SE => {:type => ::Thrift::Types::STRUCT, :name => 'se', :class => SessionExpiredException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

end

